snippet php
	<?php
	${1}
	?>
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
snippet checkbox
	$form['${1:/* form element */'] = array(
		'#type' => 'checkbox', 
		'#title' => t('${2:/* title */}'),
		'#description' => t('${3:/* description */}'),
	);
snippet checkboxes
	$form['${1:/* form element */'] = array(
	  '#type' => 'checkboxes', 
	  '#title' => t('${2:/* title */}'),
	  '#description' => t('${3:/* description */}'),
	  '#options' => array(
	    '${4:/* key */}' => t('${5:/* value */}),
 		);
	);
snippet db_fetch_array
	while ($${1:row} = db_fetch_array($result)) {
		  ${2:// Your code here}
	}
snippet db_fetch_object
	while ($${1:row} = db_fetch_object($result)) {
		  ${2:// Your code here}
	}
snippet db_query
	$result = db_query('${1:/* Query */}', ${2:/* Arguments */});
snippet db_rewrite_sql
	$result = db_query(db_rewrite_sql('${1:/* Query */}), ${2:/* Arguments */});
snippet drupal_add_css
	drupal_add_css(${1:/* path */}, '${2:/* Type (optional) 'module' or 'theme' */}', '${3:/* Media (optional) e.g. 'all', 'print', or 'screen' */}', ${4:/* preprocess TRUE of FALSE */});
snippet drupal_add_js
	drupal_add_js(${1:/* Data */}, '${2:/* Type 'core', 'module', 'theme', 'inline' and 'setting' */}', '${3:/* Scope: header or footer */}', ${4:/* Defer TRUE of FALSE */}, ${5:/* Cache TRUE or FALSE*/}, ${6: /* Preprocess TRUE or FALSE */});
snippet drupal_get_path
	drupal_get_path('${1:/* Type: module, theme or theme_engine */}', '${2:/* Name */}');
snippet drupal_get_path_alias
	drupal_get_path_alias('node/${1:nid}', ${2:language (optional)});
snippet drupal_get_form
	drupal_get_form('${1:/* Form ID */}', $${2:argument});
snippet drupal_goto
	drupal_goto('${1:path}', '${2:query}', '${3:anchor}', '${4:http_response_code}');
snippet file
	$form['${1:/* form element */}'] = array(
		'#type' => 'file', 
		'#title' => t('${2:/* title */}'), 
		'#description' => t('${3:/* description */}'),
	);
snippet hook_block
	/**
	 * Implementation of hook_block()
	 */
	function `Filename()`_block($op = 'list', $delta = 0, $edit = array()) {
		switch ($op) {
			case 'list':
				${1}
				break;
			case 'configure':
				break;
			case 'save':
				break;
			case 'view':
				break;
		}
	}
snippet hook_comment
	/**
	 * Implementation of hook_comment()
	 */
	function `Filename()`_comment(&$a1, $op) {
		switch ($op) {
			case "insert":
				${1:// Your code here}
				break;
			case "update":
				break;
			case "view":
				break;
			case "validate":
				break;
			case "publish":
				break;
			case "unpublish":
				break;
			case "delete":
				break;
		}
	}
snippet hook_cron
	/**
	 * Implementation of hook_cron()
	 */
	function `Filename()`_cron() {
		${1:// Your code here.}
	}
snippet hook_form_alter
	/**
	 * Implementation of hook_form_alter()
	 */
	function `Filename()`_form_alter(&$form, $form_state, $form_id) {
		switch ($form_id) {
			case '${1:/* your form */}':
				${2:// your code.}
		}
	}
snippet hook_help
	/**
	 * Implementation of hook_help
	 */
	function `Filename()`_help($path, $arg) {
		switch ($path) {
			case '${1:/* path */}':
				// Enter your help text below
				return t('${2:/* text */}');
		}
	}
snippet	hook_init
	/**
	 * Implementation of hook_init().
	 */
	function `Filename()`_init() {
		${1:/* your code here */}
	}
snippet hook_mail_alter
	/**
	 * Implementation of hook_mail_alter()
	 */
	function `Filename()`_mail_alter(&$message) {
		${1:// Your code here.}
	}
snippet hook_menu
	/**
	 * Implementation of hook_menu()
	 */
	function `Filename()`_menu() {
		$${1:items} = array();
		
		// Put your menu items here.
		$$1['${2:path}'] = array(
			${3}
		);
		
		return $$1;
	}
snippet hook_menu_alter
	/**
	 * Implementation of hook_menu_alter().
	 */
	function `Filename()`_menu_alter(&$${1:items}) {
		$$1['${2:/* your code here */}']
	}
snippet hook_node_info
	/**
	 * Implementation of hook_node_info().
	 */
	function `Filename()`_node_info() {
		return array(
			'${1:/* machine-readable name */}' => array(
				'name' => t('${2:/* human-readable name */}'),
				'module' => '`Filename()`',
				'description' => t('${3:/* description */}'),
			),
		);
	}
snippet hook_node_operations
	/**
	 * Implementation of hook_node_operations()
	 */
	function `Filename()`_node_operations() {
		$operations = array(
			'${1:/* operation */}' => array(
				'label' => t('${2:/* label */}'),
				'callback' => '${3:/* callback */}',
			),
		);
		return $operations;
	}

	/**
	 * Callback function
	 */
	function $3 {
		${4:// Your code here.}
	}
snippet hook_node_type
	/**
	 * Implementation of hook_node_type()
	 */
	function `Filename()`_node_type($op, $info) {
		switch ($op) {
			case "delete":
				${1:// Your code here.}
				break;
			case "insert":
				break;
			case "update":
				break;
		}
	}
snippet hook_nodeapi
	/**
	 * Implementation of hook_nodeapi()
	 */
	function `Filename()`_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
		switch ($op) {
			case "alter":
				${1:// Your code here.}
				break;
			case "delete":
				break;
			case "delete revision":
				break;
			case "insert":
				break;
			case "load":
				break;
			case "prepare":
				break;
			case "prepare translation":
				break;
			case "print":
				break;
			case "rss item":
				break;
			case "search result":
				break;
			case "presave":
				break;
			case "update":
				break;
			case "update index":
				break;
			case "validate":
				break;
			case "view":
				break;
		}
	}
snippet hook_perm
	/**
	 * Implementation of hook_perm()
	 */
	function `Filename()`_perm() {
		return array('${1:/* permission */}');
	}
snippet hook_schema
	/**
	 * Implementation of hook_schema()
	 */
	function `Filename()`_schema() {
		$schema['${1:table}'] = array(
			'description' => '${2}',
			'fields' => array(
				'${3:column}' => array(
					'description' => '${4}',
					'type' => '${5}',
					'unsigned' => ${6},
					'not null' => ${7},
				),
			),
			'indexes' => array(
				${8}
			),
			'unique keys' => array(
				${9}
			),
			'primary key' => array(${10}),
		);
		return $schema
	}
snippet hook_taxonomy
	/**
	 * Implementation of hook_taxonomy()
	 */
	function `Filename()`_taxonomy($op, $type, $array = NULL) {
		switch ($op) {
			case "delete":
				${1:// Your code here.}
				break;
			case "insert":
				break;
			case "update":
				break;
		}
	}
snippet hook_theme
	/**
	 * Implementation of hook_theme()
	 */
	function `Filename()`_theme($existing, $type, $theme, $path) {
		return array(
			'${1:theme_function}' => array(
				'arguments' => array(${2:/* Theme function arguments */}),
				${3:/* See for options */}
			),
		);
	}
snippet hook_user
	/**
	 * Implementation of hook_user()
	 */
	function `Filename()`_user($op, &$edit, &$account, $category = NULL) {
		switch ($op) {
			case "after_update":
				${1:// Your code here.}
				break;
			case "categories":
				break;
			case "delete":
				break;
			case "form":
				break;
			case "insert":
				break;
			case "load":
				break;
			case "login":
				break;
			case "logout":
				break;
			case "register":
				break;
			case "submit":
				break;
			case "update":
				break;
			case "validate":
				break;
			case "view":
				break;
		}
	}
snippet hook_user_operations
	/**
	 * Implementation of hook_user_operations()
	 */

	function `Filename()`_user_operations() {
		$operations = array(
			'${1:/* operation */}' => array(
				'label' => t('${2:/* label */}'),
				'callback' => '${3:/* callback */}',
			),
		);
		return $operations;
	}

	/**
	 * Callback function
	 */
	function $3 {
		${4:// Your code here.}
	}
snippet hook_views_api
	/**
	 * Implementation of hook_views_api()
	 */
	function `Filename()`_views_api() {
		return array(
			'api' => 2,
			'path' => drupal_get_path('module', '`Filename()`') . '/views',
		);
	}
snippet hook_views_query_alter 
	/**
	 * Implementation of hook_views_query_alter()
	 */
	function `Filename()`_views_query_alter(&$view, &$query) {
		${2:// Your code here.}
	}
snippet l
	l(${1:/* text */}, ${2:/* link */})
snippet markup
	$form['${1:/* form element */}'] = array(
		'#value' => '${2:/* markup */}',
	);
snippet select
	$form['${1:/* form element */}'] = array(
		'#type' => 'select',
		'#title' => t('${2:/* title */}'),
		'#description' => t('${3:/* description */}'),
		'#options' => array(
			'${4:/* key */}' => t('${5:/* value */}'),
		),
	);
snippet submit
	$form['${1:/* form element */}'] = array(
		'#type' => 'submit',
		'#value' => t('${2:/* value */}'),
	);
snippet t
	t('${1:/* Your text */}', array(${1:/* arguments */}))
snippet textarea
	$form['${1:/* form element */}'] = array(
		'#type' => 'textarea', 
		'#title' => t('${2:/* title */}'), 
		'#rows' => ${3:/* default:5 */},
	);
snippet textfield
	$form['${1:/* form element */}'] = array(
		'#type' => 'textfield', 
		'#title' => t('${2:/* title */}'), 
		'#size' => ${3:/* default:60 */},
	);
snippet url
	url('${1:path}', array('query' => '${2:query}', 'absolute' => ${3:false}))
snippet watchdog
	watchdog('${1:/* type */}', '${2:/* message */}'${3});

